{
  "stats": {
    "suites": 12,
    "tests": 24,
    "passes": 24,
    "pending": 0,
    "failures": 0,
    "start": "2020-11-08T09:37:49.463Z",
    "end": "2020-11-08T10:24:11.829Z",
    "duration": 54540,
    "testsRegistered": 24,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1849eae5-5559-4f20-87bd-bfc8b388b484",
      "title": "",
      "fullFile": "cypress/integration/caluclatebp.feature",
      "file": "cypress/integration/caluclatebp.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "db33b4c0-ecd1-435e-9721-a5060b49d522",
          "title": "Caluclating Home Loan Borrow Power",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get Home Loan Borrow Power (example #1)",
              "fullTitle": "Caluclating Home Loan Borrow Power Get Home Loan Borrow Power (example #1)",
              "timedOut": null,
              "duration": 7352,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "91b9b91f-fd41-413b-8ce4-cd8ba0b73a3c",
              "parentUUID": "db33b4c0-ecd1-435e-9721-a5060b49d522",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify wether Start over button resets the form for a Single Applicant (example #1)",
              "fullTitle": "Caluclating Home Loan Borrow Power Verify wether Start over button resets the form for a Single Applicant (example #1)",
              "timedOut": null,
              "duration": 3418,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a79b8da1-7628-495e-a3d4-3b378b6ce0e5",
              "parentUUID": "db33b4c0-ecd1-435e-9721-a5060b49d522",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "91b9b91f-fd41-413b-8ce4-cd8ba0b73a3c",
            "a79b8da1-7628-495e-a3d4-3b378b6ce0e5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10770,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5a68f4fd-94c7-4363-bb7d-b5eb8e22bcfd",
      "title": "",
      "fullFile": "cypress/integration/registerstation.feature",
      "file": "cypress/integration/registerstation.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "76426eed-2093-45aa-83d0-8b49a36bc860",
          "title": "Register Station Positive",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate an attempt to register a weather station with a correct API key (example #1)",
              "fullTitle": "Register Station Positive Validate an attempt to register a weather station with a correct API key (example #1)",
              "timedOut": null,
              "duration": 780,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "4342a7b5-91fc-49ae-ba93-824ba3554005",
              "parentUUID": "76426eed-2093-45aa-83d0-8b49a36bc860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate an attempt to register a weather station with a correct API key (example #2)",
              "fullTitle": "Register Station Positive Validate an attempt to register a weather station with a correct API key (example #2)",
              "timedOut": null,
              "duration": 499,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "68c69a7c-7ce6-4604-b9cb-e5ff746633bc",
              "parentUUID": "76426eed-2093-45aa-83d0-8b49a36bc860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the stations were successfully stored in the DB and values are the same as specified in the registration request. (example #1)",
              "fullTitle": "Register Station Positive Verify that the stations were successfully stored in the DB and values are the same as specified in the registration request. (example #1)",
              "timedOut": null,
              "duration": 974,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e7c8f108-719a-423e-91c2-c9875c697d8c",
              "parentUUID": "76426eed-2093-45aa-83d0-8b49a36bc860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the stations were successfully stored in the DB and values are the same as specified in the registration request. (example #2)",
              "fullTitle": "Register Station Positive Verify that the stations were successfully stored in the DB and values are the same as specified in the registration request. (example #2)",
              "timedOut": null,
              "duration": 1010,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "2ecea67f-bfc4-40bb-bb1e-320bd8a84094",
              "parentUUID": "76426eed-2093-45aa-83d0-8b49a36bc860",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4342a7b5-91fc-49ae-ba93-824ba3554005",
            "68c69a7c-7ce6-4604-b9cb-e5ff746633bc",
            "e7c8f108-719a-423e-91c2-c9875c697d8c",
            "2ecea67f-bfc4-40bb-bb1e-320bd8a84094"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3263,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "93296d11-0cb5-44ab-a54e-b62e8b39d187",
      "title": "",
      "fullFile": "cypress/integration/registerstationneg.feature",
      "file": "cypress/integration/registerstationneg.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f231198b-3372-4f7b-92a7-7a51294c0d0d",
          "title": "Register Station Negetive",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate an attempt to register a weather station without an API key",
              "fullTitle": "Register Station Negetive Validate an attempt to register a weather station without an API key",
              "timedOut": null,
              "duration": 177,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "95df50ef-00a1-497f-a12a-1dcdf7ed408d",
              "parentUUID": "f231198b-3372-4f7b-92a7-7a51294c0d0d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "95df50ef-00a1-497f-a12a-1dcdf7ed408d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 177,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "091dd756-e04a-4c91-b37d-552d20354ec2",
      "title": "",
      "fullFile": "cypress/integration/caluclatebp.feature",
      "file": "cypress/integration/caluclatebp.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "aeb2fe76-543b-4929-a2d6-a421fdf1bd28",
          "title": "Caluclating Home Loan Borrow Power",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get Home Loan Borrow Power (example #1)",
              "fullTitle": "Caluclating Home Loan Borrow Power Get Home Loan Borrow Power (example #1)",
              "timedOut": null,
              "duration": 6774,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c571cde4-e8d3-4ce6-a8b0-2baedc143474",
              "parentUUID": "aeb2fe76-543b-4929-a2d6-a421fdf1bd28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify wether Start over button resets the form for a Single Applicant (example #1)",
              "fullTitle": "Caluclating Home Loan Borrow Power Verify wether Start over button resets the form for a Single Applicant (example #1)",
              "timedOut": null,
              "duration": 4442,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "74cc9300-cfbb-4832-9aad-623fcd28999a",
              "parentUUID": "aeb2fe76-543b-4929-a2d6-a421fdf1bd28",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c571cde4-e8d3-4ce6-a8b0-2baedc143474",
            "74cc9300-cfbb-4832-9aad-623fcd28999a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11216,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0c6d1355-c91e-490e-a38c-30cb32f4c34b",
      "title": "",
      "fullFile": "cypress/integration/registerstation.feature",
      "file": "cypress/integration/registerstation.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "01356856-a635-4dda-8bf6-3e15610d011c",
          "title": "Register Station Positive",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate an attempt to register a weather station with a correct API key (example #1)",
              "fullTitle": "Register Station Positive Validate an attempt to register a weather station with a correct API key (example #1)",
              "timedOut": null,
              "duration": 768,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "43c3b4de-c88c-4333-b944-53a06ab6125b",
              "parentUUID": "01356856-a635-4dda-8bf6-3e15610d011c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate an attempt to register a weather station with a correct API key (example #2)",
              "fullTitle": "Register Station Positive Validate an attempt to register a weather station with a correct API key (example #2)",
              "timedOut": null,
              "duration": 509,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "91132d0c-81d2-4f67-8f9b-d5764632ad3f",
              "parentUUID": "01356856-a635-4dda-8bf6-3e15610d011c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the stations were successfully stored in the DB and values are the same as specified in the registration request. (example #1)",
              "fullTitle": "Register Station Positive Verify that the stations were successfully stored in the DB and values are the same as specified in the registration request. (example #1)",
              "timedOut": null,
              "duration": 1020,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "aabe3d82-51be-491a-8e37-ae55d2018682",
              "parentUUID": "01356856-a635-4dda-8bf6-3e15610d011c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the stations were successfully stored in the DB and values are the same as specified in the registration request. (example #2)",
              "fullTitle": "Register Station Positive Verify that the stations were successfully stored in the DB and values are the same as specified in the registration request. (example #2)",
              "timedOut": null,
              "duration": 1010,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "9c2d6263-691a-4331-a60e-45320fe88024",
              "parentUUID": "01356856-a635-4dda-8bf6-3e15610d011c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "43c3b4de-c88c-4333-b944-53a06ab6125b",
            "91132d0c-81d2-4f67-8f9b-d5764632ad3f",
            "aabe3d82-51be-491a-8e37-ae55d2018682",
            "9c2d6263-691a-4331-a60e-45320fe88024"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3307,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "79f19af2-5dba-4487-9674-0d1d1bc76f22",
      "title": "",
      "fullFile": "cypress/integration/registerstationneg.feature",
      "file": "cypress/integration/registerstationneg.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c4dbbd05-871f-481a-ac07-555e1c74d2de",
          "title": "Register Station Negetive",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate an attempt to register a weather station without an API key",
              "fullTitle": "Register Station Negetive Validate an attempt to register a weather station without an API key",
              "timedOut": null,
              "duration": 188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "8835dd70-be39-4de8-995e-a8a90f7de9f3",
              "parentUUID": "c4dbbd05-871f-481a-ac07-555e1c74d2de",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8835dd70-be39-4de8-995e-a8a90f7de9f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 188,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e6d2a02b-d263-4bdd-910c-1af63475e1bf",
      "title": "",
      "fullFile": "cypress/integration/caluclatebp.feature",
      "file": "cypress/integration/caluclatebp.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "686bec80-50c8-4521-9e11-aedbeabde6ca",
          "title": "Caluclating Home Loan Borrow Power",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get Home Loan Borrow Power (example #1)",
              "fullTitle": "Caluclating Home Loan Borrow Power Get Home Loan Borrow Power (example #1)",
              "timedOut": null,
              "duration": 7141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "1a8e3372-bb15-413a-b219-7644c6238368",
              "parentUUID": "686bec80-50c8-4521-9e11-aedbeabde6ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify wether Start over button resets the form for a Single Applicant (example #1)",
              "fullTitle": "Caluclating Home Loan Borrow Power Verify wether Start over button resets the form for a Single Applicant (example #1)",
              "timedOut": null,
              "duration": 3886,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c2a576ea-6430-4ac2-9fa7-b59de48e7873",
              "parentUUID": "686bec80-50c8-4521-9e11-aedbeabde6ca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1a8e3372-bb15-413a-b219-7644c6238368",
            "c2a576ea-6430-4ac2-9fa7-b59de48e7873"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11027,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f5c70bb8-658a-4afb-815e-14d7197e93c6",
      "title": "",
      "fullFile": "cypress/integration/registerstation.feature",
      "file": "cypress/integration/registerstation.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "380f9e4a-9bad-42bb-9e7a-0c72e16916a9",
          "title": "Register Station Positive",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate an attempt to register a weather station with a correct API key (example #1)",
              "fullTitle": "Register Station Positive Validate an attempt to register a weather station with a correct API key (example #1)",
              "timedOut": null,
              "duration": 761,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "aa7c8d5d-8cf4-43c1-bdca-bb6393d0ecee",
              "parentUUID": "380f9e4a-9bad-42bb-9e7a-0c72e16916a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the stations were successfully stored in the DB and values are the same as specified in the registration request. (example #1)",
              "fullTitle": "Register Station Positive Verify that the stations were successfully stored in the DB and values are the same as specified in the registration request. (example #1)",
              "timedOut": null,
              "duration": 1013,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a9d49579-f308-4640-a444-95ca1468883d",
              "parentUUID": "380f9e4a-9bad-42bb-9e7a-0c72e16916a9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa7c8d5d-8cf4-43c1-bdca-bb6393d0ecee",
            "a9d49579-f308-4640-a444-95ca1468883d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1774,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "095ca78d-9af8-4aee-a820-7d365a051b72",
      "title": "",
      "fullFile": "cypress/integration/registerstationneg.feature",
      "file": "cypress/integration/registerstationneg.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cc891efa-57cf-4776-96eb-5966ab6145b6",
          "title": "Register Station Negetive",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate an attempt to register a weather station without an API key",
              "fullTitle": "Register Station Negetive Validate an attempt to register a weather station without an API key",
              "timedOut": null,
              "duration": 178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "90394c49-3905-4ac9-b964-32d960d256db",
              "parentUUID": "cc891efa-57cf-4776-96eb-5966ab6145b6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90394c49-3905-4ac9-b964-32d960d256db"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 178,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "cf85e416-4149-4bf7-a147-e3ee5a441443",
      "title": "",
      "fullFile": "cypress/integration/caluclatebp.feature",
      "file": "cypress/integration/caluclatebp.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9ec4fa64-3b53-4ea8-8925-df122fd98448",
          "title": "Caluclating Home Loan Borrow Power",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get Home Loan Borrow Power (example #1)",
              "fullTitle": "Caluclating Home Loan Borrow Power Get Home Loan Borrow Power (example #1)",
              "timedOut": null,
              "duration": 7204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "cdfe5a64-4221-40e9-8cea-2819bd99706d",
              "parentUUID": "9ec4fa64-3b53-4ea8-8925-df122fd98448",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify wether Start over button resets the form for a Single Applicant (example #1)",
              "fullTitle": "Caluclating Home Loan Borrow Power Verify wether Start over button resets the form for a Single Applicant (example #1)",
              "timedOut": null,
              "duration": 3416,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "4a359717-879f-4a2a-8d39-5eb7d159fd67",
              "parentUUID": "9ec4fa64-3b53-4ea8-8925-df122fd98448",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cdfe5a64-4221-40e9-8cea-2819bd99706d",
            "4a359717-879f-4a2a-8d39-5eb7d159fd67"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10620,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b309d8c2-fa6c-4256-a328-5709c09d0e5a",
      "title": "",
      "fullFile": "cypress/integration/registerstation.feature",
      "file": "cypress/integration/registerstation.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5e2aad1c-a2f1-491b-9856-aa9309c8155e",
          "title": "Register Station Positive",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate an attempt to register a weather station with a correct API key (example #1)",
              "fullTitle": "Register Station Positive Validate an attempt to register a weather station with a correct API key (example #1)",
              "timedOut": null,
              "duration": 810,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "1563028d-66a4-418f-ac5c-f5a861346747",
              "parentUUID": "5e2aad1c-a2f1-491b-9856-aa9309c8155e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the stations were successfully stored in the DB and values are the same as specified in the registration request. (example #1)",
              "fullTitle": "Register Station Positive Verify that the stations were successfully stored in the DB and values are the same as specified in the registration request. (example #1)",
              "timedOut": null,
              "duration": 1025,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "6514c4fe-52ce-4e2c-9b7e-27fe52dd2129",
              "parentUUID": "5e2aad1c-a2f1-491b-9856-aa9309c8155e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1563028d-66a4-418f-ac5c-f5a861346747",
            "6514c4fe-52ce-4e2c-9b7e-27fe52dd2129"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1835,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0970fc32-bae1-44ad-b390-d8e15eaed661",
      "title": "",
      "fullFile": "cypress/integration/registerstationneg.feature",
      "file": "cypress/integration/registerstationneg.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "556a90e9-603a-487a-aeaf-38a5cf936e49",
          "title": "Register Station Negetive",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate an attempt to register a weather station without an API key",
              "fullTitle": "Register Station Negetive Validate an attempt to register a weather station without an API key",
              "timedOut": null,
              "duration": 185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e800f9e3-09fb-4ce2-9c8d-14e2f39cc4b4",
              "parentUUID": "556a90e9-603a-487a-aeaf-38a5cf936e49",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e800f9e3-09fb-4ce2-9c8d-14e2f39cc4b4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 185,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "overwrite": false,
        "html": false,
        "json": true,
        "mochaFile": "test-results/test-output-[hash].xml",
        "reportDir": "cypress/report/mochawesome-report"
      },
      "version": "5.1.0"
    }
  }
}