{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2020-11-08T05:55:54.877Z",
    "end": "2020-11-08T05:55:58.440Z",
    "duration": 3563,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "27ac409d-e058-4925-a2e2-f3fcd7aeeb5d",
      "title": "",
      "fullFile": "cypress/integration/registerstation.feature",
      "file": "cypress/integration/registerstation.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1cdf7597-c1bd-49bf-9ae0-30d31e92252d",
          "title": "API Testing Scenario",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate an attempt to register a weather station with a correct API key (example #1)",
              "fullTitle": "API Testing Scenario Validate an attempt to register a weather station with a correct API key (example #1)",
              "timedOut": null,
              "duration": 804,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3847ab6f-2900-4f85-860a-d615b49a4455",
              "parentUUID": "1cdf7597-c1bd-49bf-9ae0-30d31e92252d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate an attempt to register a weather station with a correct API key (example #2)",
              "fullTitle": "API Testing Scenario Validate an attempt to register a weather station with a correct API key (example #2)",
              "timedOut": null,
              "duration": 527,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e6f53431-b4f8-45d7-9a3f-062520ed7dda",
              "parentUUID": "1cdf7597-c1bd-49bf-9ae0-30d31e92252d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the stations were successfully stored in the DB and values are the same as specified in the registration request. (example #1)",
              "fullTitle": "API Testing Scenario Verify that the stations were successfully stored in the DB and values are the same as specified in the registration request. (example #1)",
              "timedOut": null,
              "duration": 1176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b81c40b8-dbda-47d1-84de-6c02da5d3685",
              "parentUUID": "1cdf7597-c1bd-49bf-9ae0-30d31e92252d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the stations were successfully stored in the DB and values are the same as specified in the registration request. (example #2)",
              "fullTitle": "API Testing Scenario Verify that the stations were successfully stored in the DB and values are the same as specified in the registration request. (example #2)",
              "timedOut": null,
              "duration": 1028,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e767e825-c678-4a1d-81eb-839c4bdb751a",
              "parentUUID": "1cdf7597-c1bd-49bf-9ae0-30d31e92252d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3847ab6f-2900-4f85-860a-d615b49a4455",
            "e6f53431-b4f8-45d7-9a3f-062520ed7dda",
            "b81c40b8-dbda-47d1-84de-6c02da5d3685",
            "e767e825-c678-4a1d-81eb-839c4bdb751a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3535,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "overwrite": false,
        "html": false,
        "json": true,
        "mochaFile": "test-results/test-output-[hash].xml"
      },
      "version": "5.1.0"
    }
  }
}